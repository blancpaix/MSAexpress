DB 테이블 설계 - 이거 툴 써서 기본 쿼리는 뽑아놔야 겠구먼....
exERD 이것도 잇는데 그냥 워크벤치꺼 쓰자

ORM 사용을 자제하고 raw query 를 직접 작성해보고 싶었는데 고안해야 할 제약사항이 많아서 ORM 써야겠다.
씁쓸하구먼


auth-service : auth_msa


USER {
  userUID : int (pk)
  email : char(12)
  phoneNumber : char(11)
  name : char(6),
  displayName: char(24),
  password : char(128),
  point : int,
  state : int(2) { 0: 활성화, 1: 비활성화, 2: 탈퇴 }
}
POINT {
  idx : int,
  createdAt : date,
  method : string (16),
  note : string (32),
  amount : int,
  userUID : int (fk),
}


CREATE DATABASE IF NOT EXISTS aut_msa

CREATE TABLE IF NOT EXISTS `users` (
  `userUID` int NOT NULL AUTO_INCREMENT,
  `email` varchar(45) NOT NULL,
  `phoneNumber` varchar(45) DEFAULT NULL,
  `displayname` varchar(45) NOT NULL,
  `password` varchar(128) NOT NULL,
  `point` int(10) unsigned zerofill NOT NULL,
  `state` int(2) unsigned zerofill NOT NULL DEFAULT '00',
  PRIMARY KEY (`userUID`),
  UNIQUE KEY `email_UNIQUE` (`email`),
  UNIQUE KEY `phoneNumber_UNIQUE` (`phoneNumber`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='User data'
;

CREATE TABLE IF NOT EXISTS `points` (
  `idx` int NOT NULL,
  `date` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `method` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `note` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `amount` int NOT NULL,
  `userUID` int NOT NULL,
  PRIMARY KEY (`idx`),
  KEY `FK_users_points_idx` (`userUID`),
  CONSTRAINT `FK_users_points` FOREIGN KEY (`userUID`) REFERENCES `users` (`userUID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8


CREATE TABLE IF NOT EXISTS `Users` (`userUID` CHAR(36) BINARY NOT NULL , `email` VARCHAR(255) NOT NULL UNIQUE, `phoneNumber` VARCHAR(255) NOT NULL UNIQUE, `name` VARCHAR(255) NOT NULL, `passwrod` VARCHAR(255) NOT NULL, `point` INTEGER NOT NULL DEFAULT 0, `state` INTEGER NOT NULL DEFAULT 0, PRIMARY KEY (`userUID`)) ENGINE=InnoDB;
SHOW INDEX FROM `Users` FROM `auth_msa`
CREATE TABLE IF NOT EXISTS `Points` (`idx` INTEGER NOT NULL auto_increment , `method` VARCHAR(255) NOT NULL DEFAULT 'etc', `note` VARCHAR(255), `amount` INTEGER NOT NULL, `UserUserUID` CHAR(36) BINARY, PRIMARY KEY (`idx`), FOREIGN KEY (`UserUserUID`) REFERENCES `Users` (`userUID`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
SHOW INDEX FROM `Points` FROM `auth_msa`


CREATE TABLE `auth_msa`.`point` (
  `idx` INT NOT NULL AUTO_INCREMENT,
  `timestamp` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `path` VARCHAR(45) NOT NULL DEFAULT 'etc',
  `comment` VARCHAR(60) NULL,
  `amount` INT NOT NULL,
  `userUID` VARCHAR(45) NULL,
  INDEX `user.idx_idx` (`userUID` ASC) VISIBLE,
  CONSTRAINT `user.idx`
    FOREIGN KEY (`userUID`)
    REFERENCES `auth_msa`.`user` (`email`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
COMMENT = 'User\'s point logs';


  
Pay-serive : pay_msa
  db2: pay-msa
    ITEMS : {
      itemUID, price, discount, count, discription, img, ...
    },
    BUYING : {
      userUID, count, price, discount, ...
    },

  db3: etc-msa
    BOARD : {
      timestamp, userUID, displayName, password, title, content
    },
    COMMENT: {
      timestamp, userUID, displayName, password, comment
    }

  


sequelize

모델 이름 단수로 작성하면 복수로 테이블 만들어줌 강제로 동일화 하려먼 opts에 freezeTableName
모델에 기본적으로 createdAt, updatedAt 필드가 들어감, dataType : DataTypes.DATE 
opts : { timestamps: false, createAt : false } 로 제거

DataTypes.STRING             // VARCHAR(255)
DataTypes.STRING(1234)       // VARCHAR(1234)
DataTypes.TEXT               // TEXT
DataTypes.TEXT('tiny')       // TINYTEXT
DataTypes.BOOLEAN            // TINYINT(1)
DataTypes.INTEGER            // INTEGER.ZEROFILL / UNSIGNED / UNSIGNED.ZEROFILL
DataTypes.BIGINT             // BIGINT
DataTypes.FLOAT              // FLOAT
DataTypes.DATE       // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres
DataTypes.DATE(6)    // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision
DataTypes.DATEONLY   // DATE without time
{  type: DataTypes.UUID, defaultValue: DataTypes.UUIDV4 // Or DataTypes.UUIDV1 }


const User = sequelize.define(modelName, attr, opts)
================
const User extends {
  id (idx 이거는 자동으로 삭제되는가보다...?) pk 라서? autoIncrement 라서??
};

const userModel = User.init({
  attr
}, {
  // other model opts
  sequelize, // pass the connection instance
  modelName : 'Sample'
})

userModel.id = sampleModel.belongsTo(User); 뭐 이따구로 쓴다는거니??

sequelize.sync() 하면 만들어진다는거 같네?